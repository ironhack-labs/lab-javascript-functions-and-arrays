// Iteration #1: Find the maximum
function maxOfTwoNumbers(num1, num2) {

  if (num1 > num2) {
    return num1
  } else if (num1 < num2) {
    return num2
  } else
    return (num1, num2)
}


maxOfTwoNumbers(268936, 27839);
maxOfTwoNumbers(26662, 1000000000);
maxOfTwoNumbers(23456, 23456);


// Iteration #2: Find longest word
const words = ['mystery', 'brother', 'aviator', 'crocodile', 'pearl', 'orchard', 'crackpot'];

function findLongestWord(words) {
  let longestWord = "";

  if (words.length === 0)  return null;
  else if (words.length !== 0) {
    for (let i = 0; i < words.length; i++) {
      if (words[i].length > longestWord.length) {
        longestWord = words[i]
        
      }
    }
  }return longestWord
}

findLongestWord(words)

// Iteration #3: Calculate the sum
const numbers = [6, 12, 1, 18, 13, 16, 2, 1, 8, 10];



function sumNumbers(numList) {
  let sum = 0;
  for (let i = 0; i < numList.length; i++) {
    sum += numList[i];
  }
  return sum;
}

sumNumbers(numbers);


// Iteration #3.1 Bonus:
//resuelto en clase, no hecho por mÃ­
function sum() { }



// Iteration #4: Calculate the average
// Level 1: Array of numbers
const numbersAvg = [2, 6, 9, 10, 7, 4, 1, 9];

function averageNumbers(numAvg) {
  let average;
  if (average = sumNumbers(numAvg)) {
  return average / numAvg.length;
  } else if ( numAvg.length === 0) {
    return null
  }
}
averageNumbers(numbersAvg);


// Level 2: Array of strings
const wordsArr = ['seat', 'correspond', 'linen', 'motif', 'hole', 'smell', 'smart', 'chaos', 'fuel', 'palace'];

function averageWordLength(potatoes) {
  let result = 0

  if (potatoes.length === 0) return null;
else if (potatoes.length !== 0 ){
  for (let i = 0; i < potatoes.length; i++) {
    result += potatoes[i].length;
  }

  return result / potatoes.length
}
}


averageWordLength(wordsArr);


// Bonus - Iteration #4.1
function avg() { }

// Iteration #5: Unique arrays
const wordsUnique = [
  'crab',
  'poison',
  'contagious',
  'simple',
  'bring',
  'sharp',
  'playground',
  'poison',
  'communion',
  'simple',
  'bring'
];

function uniquifyArray(banana) {

  let resultTwo = [];

  banana.forEach((word) => {
    if (!resultTwo.includes(word)) {
      resultTwo.push(word);
    } return resultTwo
  });

  

}
uniquifyArray(wordsUnique);


// Iteration #6: Find elements
const wordsFind = ['machine', 'subset', 'trouble', 'starting', 'matter', 'eating', 'truth', 'disobedience'];

function doesWordExist(apple, wordToSearch) {
  
  if (apple.length ===  0 ) return null;
  else if (apple.length !== 0) {
     if (apple.includes(wordToSearch)) {

    return true;

  }

  else return false
}

}

doesWordExist(wordsFind, "cacahuete")
doesWordExist()


// Iteration #7: Count repetition
const wordsCount = [
  'machine',
  'matter',
  'subset',
  'trouble',
  'starting',
  'matter',
  'eating',
  'matter',
  'truth',
  'disobedience',
  'matter',
  `subset`
];

function howManyTimes(apple, wordToSearch) {
  let count = 0;
  for (let i = 0; i < apple.length; i++) {

    if (apple[i] === wordToSearch) {
      count++
    }
  }


  return count
}
